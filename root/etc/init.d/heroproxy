#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

# 检查防火墙类型
check_firewall_type() {
    # 优先检查是否有 nft 命令
    if command -v nft >/dev/null 2>&1; then
        echo "nftables"
    else
        # 如果没有 nft，则使用 iptables
        echo "iptables"
    fi
}

# 添加防火墙规则
add_firewall_rules() {
    local fw_type="$1"
    
    if [ "$fw_type" = "nftables" ]; then
        # 使用 nftables 规则
        nft -f /etc/heroproxy/nftables/tproxy.conf
    else
        # 使用 iptables 规则
        sh /etc/heroproxy/iptables/tproxy.sh
    fi
}

# 删除防火墙规则
del_firewall_rules() {
    local fw_type="$1"
    
    if [ "$fw_type" = "nftables" ]; then
        # 删除 nftables 规则
        nft delete table inet singbox 2>/dev/null
        nft -f /etc/nftables.conf
    else
        # 删除 iptables 规则
        sh /etc/heroproxy/iptables/clean.sh
    fi
}

# 修改日志函数
log() {
    local msg="$1"
    local time=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$time] $msg" >> /etc/heroproxy/heroproxy.log
    
    # 限制日志大小
    if [ -f /etc/heroproxy/heroproxy.log ]; then
        local size=$(wc -c < /etc/heroproxy/heroproxy.log)
        if [ $size -gt 1048576 ]; then  # 1MB
            tail -c 524288 /etc/heroproxy/heroproxy.log > /etc/heroproxy/heroproxy.log.tmp
            mv /etc/heroproxy/heroproxy.log.tmp /etc/heroproxy/heroproxy.log
        fi
    fi
}

start_service() {
    config_load heroproxy
    config_get enabled config enabled "0"
    config_get core_path config core_path "/usr/bin/sing-box"
    config_get config_path config config_path "/etc/heroproxy/config.json"
    config_get mosdns_path config mosdns_path "/usr/bin/mosdns"
    config_get mosdns_dir config mosdns_dir "/etc/heroproxy/mosdns"
    config_get mosdns_config config mosdns_config "/etc/heroproxy/mosdns/config.yaml"
    
    if [ "$enabled" = "1" ]; then
        log "Starting service..."
        
        # 创建日志文件并设置权限
        mkdir -p /etc/heroproxy/mosdns
        touch /etc/heroproxy/heroproxy.log /etc/heroproxy/singbox.log /etc/heroproxy/mosdns/mosdns.log
        chmod 666 /etc/heroproxy/heroproxy.log /etc/heroproxy/singbox.log /etc/heroproxy/mosdns/mosdns.log
        
        # 修改 dnsmasq 配置
        log "Configuring dnsmasq..."
        uci set dhcp.@dnsmasq[0].port='5335'
        uci set dhcp.@dnsmasq[0].dns_redirect='1'
        uci set dhcp.@dnsmasq[0].localuse='1'
        uci commit dhcp
        /etc/init.d/dnsmasq restart
        
        # 重启网络使配置生效
        log "Restarting network..."
        /etc/init.d/network restart
        sleep 2
        
        # 启动 mosdns
        log "Starting mosdns..."
        if [ -f "$mosdns_path" ]; then
            # 确保 mosdns 目录存在
            mkdir -p "$mosdns_dir"
            
            procd_open_instance mosdns
            procd_set_param command "$mosdns_path" start -d "$mosdns_dir" -c "$mosdns_config"
            procd_set_param respawn
            procd_set_param stdout 1
            procd_set_param stderr 1
            procd_set_param file "$mosdns_dir/mosdns.log"
            procd_close_instance
            
            sleep 2
        fi
        
        # 添加网络配置
        log "Adding network configuration..."
        if [ ! -f /etc/config/network.heroproxy.bak ]; then
            cp /etc/config/network /etc/config/network.heroproxy.bak
            cat /etc/heroproxy/nftables/route_network >> /etc/config/network
            /etc/init.d/network restart
        else
            log "Warning: Backup file already exists, skipping network configuration"
        fi
        
        # 检查防火墙类型并加载对应规则
        local fw_type=$(check_firewall_type)
        log "Current firewall type: $fw_type"
        
        # 添加防火墙和路由规则
        log "Adding firewall and routing rules..."
        if [ "$fw_type" = "nftables" ]; then
            add_firewall_rules "nftables"
        else
            add_firewall_rules "iptables"
        fi
        
        # 启动 sing-box
        log "Starting sing-box..."
        if [ -f "$core_path" ]; then
            # 检查配置文件
            if [ ! -f "$config_path" ]; then
                log "Error: sing-box config file not found: $config_path"
                return 1
            fi
            
            # 验证配置文件
            if ! "$core_path" check -c "$config_path"; then
                log "Error: sing-box config check failed"
                return 1
            fi
            
            procd_open_instance singbox
            procd_set_param command "$core_path" run -c "$config_path"
            procd_set_param respawn
            procd_set_param stdout 1
            procd_set_param stderr 1
            procd_set_param file /etc/heroproxy/singbox.log
            procd_close_instance
            
            # 等待 sing-box 启动
            sleep 2
            
            # 检查是否成功启动
            if ! pgrep -f "$core_path.*run" >/dev/null; then
                log "Error: sing-box failed to start"
                return 1
            fi
            
            log "Sing-box started successfully"
        else
            log "Error: sing-box binary not found: $core_path"
            return 1
        fi
        
        log "Service started successfully"
    else
        log "Service is disabled, not starting"
    fi
}

stop_service() {
    log "Stopping service..."
    
    # 先停止服务进程
    procd_kill singbox
    procd_kill mosdns
    killall sing-box 2>/dev/null
    killall mosdns 2>/dev/null
    sleep 2
    
    # 检查防火墙类型并清理对应规则
    local fw_type=$(check_firewall_type)
    log "Current firewall type: $fw_type"
    
    # 删除防火墙规则
    del_firewall_rules "$fw_type"
    
    # 恢复 dnsmasq 配置但暂不重启
    log "Restoring dnsmasq config..."
    uci set dhcp.@dnsmasq[0].port='53'
    uci delete dhcp.@dnsmasq[0].dns_redirect 2>/dev/null
    uci delete dhcp.@dnsmasq[0].localuse 2>/dev/null
    uci commit dhcp
    
    # 恢复网络配置但暂不重启
    if [ -f /etc/config/network.heroproxy.bak ]; then
        log "Restoring network config..."
        cp /etc/config/network.heroproxy.bak /etc/config/network
        rm -f /etc/config/network.heroproxy.bak
    fi
    
    # 清理日志文件
    log "Cleaning log files..."
    : > /etc/heroproxy/heroproxy.log
    : > /etc/heroproxy/mosdns/mosdns.log
    : > /etc/heroproxy/singbox.log 2>/dev/null
    
    # 最后一次性重启所有服务
    log "Restarting services..."
    /etc/init.d/dnsmasq restart
    sleep 1
    
    # 使用 ubus 调用网络重启，这样更温和
    ubus call network reload
    
    log "Service stopped"
    
    # 给 LuCI 一点时间完成响应
    sleep 1
}

service_triggers() {
    procd_add_reload_trigger "heroproxy"
}

reload_service() {
    stop
    start
}

start() {
    # 确保目录存在
    mkdir -p /etc/heroproxy/rule/geoip
    mkdir -p /etc/heroproxy/rule/geosite
    
    # 启动服务
    /etc/init.d/heroproxy start
} 